tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an OpenStack vm created using Cloudify's OpenStack plugin
  and simple web server started using Cloudify's script plugin.
  In addition, an OpenStack floating ip and security group are created and associated with the created vm.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.2/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml

inputs:
  keystone_username:
    default: ''
    type: string
  keystone_password:
    default: ''
    type: string
  keystone_tenant_name:
    default: ''
    type: string
  keystone_url:
    default: ''
    type: string
  region:
    default: ''
    type: string
  webserver_port:
    description: The HTTP web server port
    default: 8080
  agent_user:
    description: User name used when SSH-ing into the started machine
  image:
    type: string
    description: Openstack image name or id to use for the new server
  flavor:
    type: string
    description: Openstack flavor name or id to use for the new server
  external_network_name:
    type: string
    description: Name of the network from which to obtain floating IP's
  private_key_path:
    type: string
    description: Location where the manager should store the private key being created
  default_scale_count:
    type: integer
    description: Number of scale units to deploy by default
    default: 1

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:
  virtual_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ http_web_server, port ] }

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      private_key_path: { get_input: private_key_path }

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        user: { get_input: agent_user }
      image: { get_input: image }
      flavor: { get_input: flavor }
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: virtual_ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: security_group
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}
  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [virtual_ip, floating_ip_address] },
                      ':', { get_property: [http_web_server, port] }] }

groups:
  vm_and_ip:
    members: [vm, virtual_ip]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: default_scale_count }
    targets: [vm_and_ip]
